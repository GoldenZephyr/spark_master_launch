<launch>

    <arg name="robot_name"/>
    <arg name="log_directory" default="$(find spark_master_launch)/output)"/>
    <arg name="output" default="screen"/>

    <arg name="launch_hydra_ros" default="false"/>
    <arg name="launch_static_tfs" default="false"/>
    <arg name="launch_robot_gt_pose" default="false"/>
    <arg name="launch_rgbd_to_pointcloud" default="false"/>
    <arg name="launch_semantic_recolor" default="false"/>
    <arg name="launch_visualizer" default="false"/>
    <arg name="launch_posegraph_view" default="false"/>
    <arg name="launch_scene_graph_logger" default="false"/>
    <arg name="launch_nodelet_manager" default="false"/>
    <arg name="launch_depth_rectifier_nodelet" default="false"/>
    <arg name="launch_recolor_nodelet" default="false"/>
    <arg name="launch_rviz" default="false"/>
    <arg name="start_pose_graph_viewer" default="false"/>
    <arg name="launch_forward_static_tf" default="false" />
    <arg name="launch_base_static_tf" default="false"/>
    <arg name="launch_kimera_vio_ros" default="false"/>
    <arg name="launch_lcd_agent" default="false"/>
    <arg name="launch_lcd_agent_prev" default="false"/>

    <arg name="sim_time_required" default="false"/>
    <param name="use_sim_time" value="$(arg sim_time_required)"/>

<group ns="$(arg robot_name)">
    <!-- hydra_ros -->
    <group if="$(arg launch_hydra_ros)">
        <!-- kimera topic remappings -->
        <remap from="~pose_graph" to="kimera_vio_ros/pose_graph_incremental"/>
        <remap from="~agent_node_measurements" to="kimera_distributed/optimized_nodes"/>
        <remap from="~bow_vectors" to="kimera_vio_ros/bow_query"/>
        <remap from="frame_registration" to="kimera_vio_ros/kimera_vio_ros_node/register_lcd_frames"/>
        <!-- sensor topic remappings -->
        <remap from="~pointcloud" to="semantic_pointcloud"/>
        <remap from="~rgb/image_raw" to="forward/color/image_rect_color"/>
        <remap from="~rgb/image_raw/compressed" to="forward/color/image_rect_color/compressed"/>
        <remap from="~rgb/camera_info" to="forward/color/camera_info"/>
        <remap from="~depth_registered/image_rect" to="forward/depth/image_rect_raw"/>
        <remap from="~semantic/image_raw" to="semantic/image_raw"/>

        <include file="$(find spark_master_launch)/launch/nodes/hydra_ros_node.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="hydra_ros_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- launch_static_tfs -->
    <group if="$(arg launch_static_tfs)">
        <include file="$(find spark_master_launch)/launch/nodes/static_tfs/$(arg robot_name)_static_tfs.xml"/> 
    </group>

    <!-- robot_gt_pose -->
    <group if="$(arg launch_robot_gt_pose)">
        <include file="$(find spark_master_launch)/launch/nodes/csv_to_tf.launch"> 
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="csv_to_tf_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- nodelet manager -->
    <group if="$(arg launch_nodelet_manager)">
        <include file="$(find spark_master_launch)/launch/nodes/nodelet_manager.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- rgbd_to_poincloud -->
    <group if="$(arg launch_rgbd_to_pointcloud)">
        <remap from="~rgb/camera_info" to="forward/color/camera_info"/>
        <remap from="~rgb/image_rect_color" to="forward/color/image_rect_color"/>
        <remap from="~depth_registered/image_rect" to="forward/depth/image_rect_raw"/>
        <remap from="~depth_registered/points" to="semantic_pointcloud"/>
        <include file="$(find spark_master_launch)/launch/nodes/rgbd_to_pointcloud.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="cloudify"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- semantic_recolor -->
    <group if="$(arg launch_semantic_recolor)">
        <remap from="~rgb/image_raw" to="forward/color/image_raw"/>
        <remap from="~rgb/image_raw/compressed" to="forward/color/image_raw/compressed"/>
        <remap from="~semantic/image_raw" to="semantic/image_raw"/>
        <include file="$(find spark_master_launch)/launch/nodes/semantic_recolor.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="semantic_recolor_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- recolor nodelet -->
    <group if="$(arg launch_recolor_nodelet)">
        <!-- NOTE: these remappings are not right -->
        <remap from="~labels/image_raw" to="oneformer/labels/image_raw"/>
        <remap from="~labels/image_raw/compressed" to="oneformer/labels/image_raw/compressed"/>
        <remap from="~semantic/image_raw" to="SOME_IMAGE_TOPIC/image_raw"/>
        <remap from="~semantic_color/image_raw" to="SOME_IMAGE_TOPIC_COLOR/image_raw"/>

        <include file="$(find spark_master_launch)/launch/nodes/recolor_nodelet.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="node_name" value="recolor_nodelet"/>
            <arg name="required" value="true"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- depth rectifier -->
    <group if="$(arg launch_depth_rectifier_nodelet)">
        <remap from="~rgb/camera_info" to="forward/color/camera_info"/>
        <remap from="~depth/image_rect" to="forward/depth/image_rect_raw"/>
        <remap from="~depth/camera_info" to="forward/depth/camera_info"/>
        <include file="$(find spark_master_launch)/launch/nodes/depth_rectifier_nodelet.launch">
            <arg name="node_name" value="depth_rectifier"/>
            <arg name="required" value="true"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- dsg visualizer -->
    <group if="$(arg launch_visualizer)">
        <remap from="~dsg" to="hydra_ros_node/dsg"/>
        <remap from="~dsg_mesh_updates" to="hydra_ros_node/dsg_mesh"/>
        <include file="$(find spark_master_launch)/launch/nodes/hydra_streaming_visualizer.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="hydra_streaming_visualizer"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- start rviz normal group -->
    <group if="$(arg launch_rviz)">
        <include file="$(find spark_master_launch)/launch/nodes/rviz.launch" />
    </group>
    <!-- end rviz normal group -->

    <group if="$(arg launch_base_static_tf)" >
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_static_tf" args="0 0 0 0.5 -0.5 0.5 0.5 $(arg robot_name)/kimera_base $(arg robot_name)/base"/>
    </group>

    <group if="$(arg launch_forward_static_tf)" >
        <node pkg="tf2_ros" type="static_transform_publisher" name="forward_static_tf" args="0 0 0 0 0 0 1 $(arg robot_name)/kimera_base $(arg robot_name)/forward_link"/>
    </group>

    <!-- Pose graph view NOT WORKING-->
    <group if="$(arg launch_posegraph_view)">
        <include file="$(find pose_graph_tools)/launch/posegraph_view.launch"
                 if="$(arg start_pose_graph_viewer)">
            <arg name="frame_id"      value="$(arg odom_frame)" />
            <arg name="graph_topic"   value="pose_graph" />
            <arg name="ns"            value="hydra_ros_node/pgmo"/>
        </include>
    </group>

    <!-- Scene graph logger NOT WORKING -->
    <group if="$(arg launch_scene_graph_logger)">
        <include file="$(find hydra_ros)/launch/utils/scene_graph_logger.launch">
            <arg name="output_path" value="$(arg log_directory)"/>
        </include>
    </group>

    <group if="$(arg launch_kimera_vio_ros)">
        <remap from="left_cam/image_raw" to="forward/color/image_raw"/>
        <remap from="depth_cam/image_raw" to="forward/depth/image_rect_raw"/>
        <remap from="imu" to="forward/imu"/>
        <remap from="external_odom" to="jackal_velocity_controller/odom"/>
        <remap from="reinit_flag" to="~reinit_flag"/>
        <remap from="reinit_pose" to="~reinit_pose"/>

        <!-- These are stupid and should be handled by having the node subscribe properly -->
        <remap from="bow_query" to="~bow_query"/>
        <remap from="frontend_stats" to="~frontend_stats"/>
        <remap from="imu_bias" to="~imu_bias"/>
        <remap from="mesh" to="~mesh"/>
        <remap from="odometry" to="~odometry"/>
        <remap from="optimized_odometry" to="~optimized_odometry"/>
        <remap from="optimized_trajectory" to="~optimized_trajectory"/>
        <remap from="pose_graph" to="~pose_graph"/>
        <remap from="pose_graph_incremental" to="~pose_graph_incremental"/>
        <remap from="resiliency" to="~resiliency"/>
        <remap from="time_horizon_pointcloud" to="~time_horizon_pontcloud" />
        <remap from="vlc_frames" to="~vlc_frames"/>

        <include file="$(find spark_master_launch)/launch/nodes/kimera_vio_ros_node.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="kimera_vio_ros_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <!-- lcd agent -->
    <group if="$(arg launch_lcd_agent)">
        <remap from="vlc_requests" to="/lcd_base/vlc_requests"/>
        <remap from="bow_requests" to="/lcd_base/bow_requests"/>
        <remap from="/$(arg robot_name)/kimera_vio_ros/bow_query" to="kimera_vio_ros_node/bow_query"/>
        <remap from="/$(arg robot_name)/kimera_vio_ros/vlc_frames" to="kimera_vio_ros_node/vlc_frames"/>
        <include file="$(find spark_master_launch)/launch/nodes/lcd_agent_node.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="node_name" value="lcd_agent_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

</group>


    <!-- lcd agent prev -->
    <group if="$(arg launch_lcd_agent_prev)" ns="$(arg robot_name)_prev">
        <remap from="vlc_requests" to="/lcd_base/vlc_requests"/>
        <remap from="bow_requests" to="/lcd_base/bow_requests"/>
        <remap from="/$(arg robot_name)_prev/kimera_vio_ros/bow_query" to="kimera_vio_ros_node/bow_query"/>
        <remap from="/$(arg robot_name)_prev/kimera_vio_ros/vlc_frames" to="kimera_vio_ros_node/vlc_frames"/>
        <include file="$(find spark_master_launch)/launch/nodes/lcd_agent_node.launch">
            <arg name="robot_name" value="$(arg robot_name)_prev"/>
            <arg name="node_name" value="lcd_agent_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

    <group if="$(arg launch_hydra_multi_node)">
        <include file="$(find spark_master_launch)/launch/nodes/hydra_multi_node.launch">
            <arg name="node_name" value="hydra_multi_node"/>
            <arg name="required" value="true"/>
            <arg name="configuration_name" value="dcist"/>
            <arg name="output" value="$(arg output)"/>
        </include>
    </group>

</launch>
